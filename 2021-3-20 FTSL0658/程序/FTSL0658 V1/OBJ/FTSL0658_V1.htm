<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\FTSL0658_V1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\FTSL0658_V1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Mar 23 17:29:00 2021
<BR><P>
<H3>Maximum Stack Usage =       2572 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Read_OS_Group &rArr; Short_RES_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2fe]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1fc]">Init_Take_OFF_EACT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">Take_Product_EACT_set</a><BR>
 <LI><a href="#[1fb]">Init_Up_Down_EACT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">Up_Down_EACT_set</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a7]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">AT24CXX_ReadLenByte</a> from 24cxx.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c]">AT24CXX_WriteLenByte</a> from 24cxx.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2b]">Ananlog_Switch_debug_fun</a> from os.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[26]">BarcodeCheckEnable_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[28]">BarcodeFormat_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[27]">BarcodeLength_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[20]">BarcodeMode_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[23]">BarcodeReaderBauds_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[25]">BarcodeReaderTriggerTest</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[22]">BarcodeReader_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[72]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">Cmd_Dealy_Set</a> from cmd.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[63]">Connect_Handler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[83]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[87]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b0]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b1]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b2]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b3]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DebugMode</a> from debug.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[75]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">Debug_Banpanji</a> from sup_fun.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[49]">Dot_CNT_Clear</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[47]">Dot_CNT_Enable_Set</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[48]">Dot_CNT_Set</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[44]">Dot_Enable_Set</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[18]">Dot_Set</a> from dot.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[18]">Dot_Set</a> from dot.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[45]">Dot_Time_Set</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[1d]">ETH_NET_Set</a> from eth_config.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[7e]">EXTI0_IRQHandler</a> from motor.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a0]">EXTI15_10_IRQHandler</a> from motor.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8f]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a8]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bc]">GPIO_Initialize_Motor</a> from motor.o(.text) referenced 2 times from usb_move.o(.text)
 <LI><a href="#[68]">GetStationNum_Handler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[65]">Get_TestDetailItem_Handler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[64]">Get_TestItem_Handler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[70]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[98]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[97]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[99]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">List_Auto_Test_Fun</a> from list_test.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[13]">List_Step_Test_Fun</a> from list_test.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[29]">MOVE_debug_Fun</a> from sup_fun.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[71]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">Mode_Set</a> from usmart_config.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[4c]">Motor_Dot_Pos_Set</a> from motor.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[4a]">Motor_Dot_Speed_Set</a> from motor.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[252]">Motor_Limit_Check</a> from motor.o(.text) referenced from motor.o(.text)
 <LI><a href="#[4b]">Motor_RESET_Speed_Set</a> from motor.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[4d]">Motor_Standby_Pos_Set</a> from motor.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[4e]">Motor_Up_Pos_Set</a> from motor.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[6f]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">Open_Test_Function</a> from open.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[79]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">Product_Mark_Dot</a> from dot.o(.text) referenced 2 times from dot.o(.data)
 <LI><a href="#[7d]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a1]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ba]">Read_IC_ID_Debug</a> from id.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[2f]">Read_OS_Group</a> from os_study.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[7]">Relay_Drive</a> from sup_fun.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[6e]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a9]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9c]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ab]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">Sample_Cycle_Set</a> from sample_notice.o(.text) referenced 2 times from sample_notice.o(.data)
 <LI><a href="#[41]">Sample_Notice_Enable_Set</a> from sample_notice.o(.text) referenced 2 times from sample_notice.o(.data)
 <LI><a href="#[43]">Sample_Time_Display</a> from sample_notice.o(.text) referenced 2 times from sample_notice.o(.data)
 <LI><a href="#[21]">Scan_Push_Privious_Or_Next</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[16]">Scan_Set</a> from barcode.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[16]">Scan_Set</a> from barcode.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[24]">Scan_Time_Set</a> from barcode.o(.text) referenced 2 times from barcode.o(.data)
 <LI><a href="#[15]">Search_Point_Function</a> from os.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[2e]">Self_Check_Ananlog_Switch</a> from os.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[2c]">Self_Check_Fun</a> from debug.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[30]">Short_Gooup_Edit_Check</a> from short.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[2d]">Short_Self_Check</a> from os.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[a]">Short_Test_Function</a> from short.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[5e]">Show_Take_FAIL_Product</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[5d]">Show_Take_PASS_Product</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[b8]">Smaple_Notice_Set</a> from sample_notice.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[66]">SoftwareClearHandler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[6b]">SoftwareMCUISPHandler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[6c]">SoftwareReadHandler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[6d]">SoftwareResetHandler</a> from wtb.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[67]">SoftwareStartTestHandler</a> from wtb.o(.text) referenced 4 times from wtb.o(.data)
 <LI><a href="#[77]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b4]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1b]">System_Name_Set_Fun</a> from reg_config.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[19]">System_Parameter_Set</a> from menu.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[7a]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">TEST_Station_Set</a> from base_config.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[90]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[93]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[92]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[91]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[94]">TIM2_IRQHandler</a> from usmart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[95]">TIM3_IRQHandler</a> from fre.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[96]">TIM4_IRQHandler</a> from sample_notice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[aa]">TIM5_IRQHandler</a> from fre.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ae]">TIM6_IRQHandler</a> from motor.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[af]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a3]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a6]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a5]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a4]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">Take_Product_EACT_Enable_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[58]">Take_Product_EACT_NG_Num_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[5c]">Take_Product_EACT_NG_Postion_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[57]">Take_Product_EACT_OK_Num_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[5b]">Take_Product_EACT_OK_Postion_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[59]">Take_Product_EACT_Product_Postion_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[56]">Take_Product_EACT_Speed_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[5a]">Take_Product_EACT_Standby_Postion_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[b7]">Take_Product_EACT_set</a> from x_axis.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[54]">Take_Product_NG_Enable_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[55]">Take_Product_Push_Enable_Set</a> from x_axis.o(.text) referenced 2 times from x_axis.o(.data)
 <LI><a href="#[1f]">Test_Previous_Wait_Time_Set</a> from cmd.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[37]">Type_Cap_Test_Fun</a> from uf.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[39]">Type_Current_Test_Fun</a> from leakage_i.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[36]">Type_Diode_Test_Fun</a> from diode.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3e]">Type_Hall_Test_Fun</a> from hall.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3f]">Type_IC_ID_Test_Fun</a> from id.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[34]">Type_Isrc_Test_Fun</a> from mr.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3d]">Type_LED_Test_Fun</a> from led.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[33]">Type_OS_Open_Test_Fun</a> from open.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[32]">Type_OS_Short_Test_Fun</a> from short.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[40]">Type_RF_ID_Test_Fun</a> from rf_id.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3c]">Type_Switch_Test_Fun</a> from switch.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3b]">Type_TVS_Test_Fun</a> from diode.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[3a]">Type_Volts_Test_Fun</a> from ldo.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[35]">Type_Vsrc_Test_Fun</a> from kohm.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[38]">Type_pF_Cap_Test_Fun</a> from pf.o(.text) referenced 2 times from list_test.o(.data)
 <LI><a href="#[ac]">UART4_IRQHandler</a> from uart4.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ad]">UART5_IRQHandler</a> from uart5.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9d]">USART1_IRQHandler</a> from usart1.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9e]">USART2_IRQHandler</a> from usart2.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9f]">USART3_IRQHandler</a> from usart3.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a2]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">USB_Motor_Enable_Set</a> from usb_move.o(.text) referenced 2 times from usb_move.o(.data)
 <LI><a href="#[51]">USB_Move_Display</a> from usb_move.o(.text) referenced 2 times from usb_move.o(.data)
 <LI><a href="#[bb]">USB_Move_Set</a> from usb_move.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[50]">USB_SET_Pos_Set</a> from usb_move.o(.text) referenced 2 times from usb_move.o(.data)
 <LI><a href="#[52]">USB_SET_Speed_Set</a> from usb_move.o(.text) referenced 2 times from usb_move.o(.data)
 <LI><a href="#[5f]">Up_Down_EACT_Enable_Set</a> from y_axis.o(.text) referenced 2 times from y_axis.o(.data)
 <LI><a href="#[62]">Up_Down_EACT_Push_Set</a> from y_axis.o(.text) referenced 2 times from y_axis.o(.data)
 <LI><a href="#[60]">Up_Down_EACT_Speed_Set</a> from y_axis.o(.text) referenced 2 times from y_axis.o(.data)
 <LI><a href="#[61]">Up_Down_EACT_Standy_Set</a> from y_axis.o(.text) referenced 2 times from y_axis.o(.data)
 <LI><a href="#[b6]">Up_Down_EACT_set</a> from y_axis.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[6a]">UploadFixtureConfig</a> from base_config.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[69]">UploadShortGroup</a> from data.o(.text) referenced 2 times from wtb.o(.data)
 <LI><a href="#[73]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">Usmart_Debug_Fun</a> from usmart.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[31]">ViewShortGroup</a> from short.o(.text) referenced 2 times from debug.o(.data)
 <LI><a href="#[78]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c4]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c3]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[be]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[c1]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[c0]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[bd]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[14]">clear_counter</a> from reg_config.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[8]">delay_ms</a> from delay.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9]">delay_us</a> from delay.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[bf]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[c2]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[b9]">pF_Capacitor_Calibration_Fun</a> from pf.o(.text) referenced from base_config.o(.text)
 <LI><a href="#[4]">read_addr</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[f]">usmart_cmd_rec</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[10]">usmart_exe</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[e]">usmart_init</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[11]">usmart_scan</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[5]">write_addr</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[33e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[33f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[340]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[341]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[342]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c8]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[2df]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ca]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[cc]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[cf]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[343]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[344]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d0]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d6]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d8]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[db]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[dc]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[de]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[345]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e0]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e4]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e6]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[346]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[347]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[348]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[349]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[34b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[34c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[34d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[34e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[34f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[350]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[351]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[352]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[353]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[354]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[355]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[356]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[357]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[358]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[359]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[35c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[35d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[35e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[35f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[360]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[361]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[c6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[362]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ed]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[363]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1868 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; resetMCU &rArr; Self_Test_DAC_line &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[364]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[306]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[365]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[366]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Limit_Check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[367]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[f8]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[135]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
</UL>

<P><STRONG><a name="[369]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
</UL>

<P><STRONG><a name="[36a]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
</UL>

<P><STRONG><a name="[36e]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_dac.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[1d1]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[371]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[1d0]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[372]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[373]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[374]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Limit_Check
</UL>

<P><STRONG><a name="[377]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[256]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[fc]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[133]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_IIC_BUS
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mini_CAP_Test_GPIO
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CAP_Test_CFG
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Magnet_PWR_CFG
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AD7176_CFG
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Voltage_Source_CFG
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Voltage_Gain_CFG
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Motor_CFG
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Analog_Switch_CFG
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DSS_CFG
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Beep_CFG
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Sensor_CFG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AD7190_CFG
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Drive_CFG
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IIC_CFG
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LCD_CFG
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initialize_Motor
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudCondition
</UL>

<P><STRONG><a name="[37b]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mini_CAP_Test_GPIO
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CAP_Test_CFG
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AD7176_CFG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AD7190_CFG
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Drive_CFG
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IIC_CFG
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudCondition
</UL>

<P><STRONG><a name="[155]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Voltage_Source_CFG
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Motor_CFG
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Analog_Switch_CFG
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initialize_Motor
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudCondition
</UL>

<P><STRONG><a name="[380]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock_Enable
</UL>

<P><STRONG><a name="[253]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Limit_Check
</UL>

<P><STRONG><a name="[385]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[fd]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[388]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1cf]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[132]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock_Enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Limit_Check
</UL>

<P><STRONG><a name="[11d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[fb]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[f9]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[398]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[11e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[39e]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[106]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[104]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[102]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[100]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[109]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3a2]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[3a7]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[3a8]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[10a]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[10c]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[10e]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETRConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[10d]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[10f]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_ETRClockMode2Config &rArr; TIM_ETRConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
</UL>

<P><STRONG><a name="[3ac]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
</UL>

<P><STRONG><a name="[3d4]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>

<P><STRONG><a name="[110]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[111]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[3e2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[1d4]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[1d3]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[3e5]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[1d6]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_NAck
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Ack
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read_Byte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Send_Byte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Send_Ack
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Ack
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_NAck
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Stop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Four_Point
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Three_Point
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardOpen_Single_Point
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMD
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMC
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMB
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Valve
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_RES_Check
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstarttime
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NByteDataToDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OneByteToDevice
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUISP_Hander
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Light_Check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Baipanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Sensor_Signal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_RESET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vsrc_RES_TEST_SET
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Initialize_Motor
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Standby_Pos_Set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayETHPar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Scan_Configration
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudCondition
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBUS_reset_CPLD
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Enable_RES_Test
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_RESET
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_RESET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_RESET
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_SET
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVolts_TEST_Relay_RESET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_RESET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_RESET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[124]"></a>usmart_reset_runtime</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usmart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[125]"></a>usmart_get_runtime</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usmart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[94]"></a>TIM2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>Timer2_Init</STRONG> (Thumb, 724 bytes, Stack size 32 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[e]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usmart_init &rArr; Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usmart_cmd_rec</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>usmart_exe</STRONG> (Thumb, 632 bytes, Stack size 128 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>usmart_scan</STRONG> (Thumb, 110 bytes, Stack size 144 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USART_buffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Usmart_Debug_Fun</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Usmart_Debug_Fun &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>read_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usmart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Mode_Set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usmart_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Mode_Set &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>usmart_strcmp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[130]"></a>usmart_strcopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[12f]"></a>usmart_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[12d]"></a>usmart_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[11b]"></a>usmart_str2num</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[116]"></a>usmart_get_cmdname</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[12e]"></a>usmart_search_nextc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[119]"></a>usmart_get_fname</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[11a]"></a>usmart_get_aparm</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[123]"></a>usmart_get_parmpos</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[122]"></a>usmart_get_fparam</STRONG> (Thumb, 262 bytes, Stack size 240 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[6e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[131]"></a>Dac_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dac_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
</UL>

<P><STRONG><a name="[138]"></a>DAC_Set_Vol_Ref</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DAC_Set_Vol_Ref &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
</UL>

<P><STRONG><a name="[13e]"></a>DAC_Set_Vol</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_RESET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vsrc_RES_TEST_SET
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_RESET
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVolts_TEST_Relay_RESET
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_RESET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_RESET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
</UL>

<P><STRONG><a name="[148]"></a>Self_Test_DAC_line</STRONG> (Thumb, 274 bytes, Stack size 848 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1860 + Unknown Stack Size
<LI>Call Chain = Self_Test_DAC_line &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>

<P><STRONG><a name="[14b]"></a>GPIO_Clock_Enable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Clock_Enable &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[14d]"></a>GPIO_LCD_CFG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_LCD_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_IIC_CFG</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_IIC_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[14f]"></a>GPIO_Drive_CFG</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Drive_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[150]"></a>GPIO_AD7190_CFG</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[151]"></a>GPIO_Sensor_CFG</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Sensor_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[152]"></a>GPIO_Beep_CFG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[153]"></a>GPIO_DSS_CFG</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[154]"></a>GPIO_Analog_Switch_CFG</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Analog_Switch_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[156]"></a>GPIO_Motor_CFG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Motor_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[157]"></a>GPIO_Voltage_Gain_CFG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[158]"></a>GPIO_Voltage_Source_CFG</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[159]"></a>GPIO_AD7176_CFG</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_AD7176_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[15a]"></a>GPIO_Magnet_PWR_CFG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_CAP_Test_CFG</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_CAP_Test_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
</UL>

<P><STRONG><a name="[15c]"></a>ALL_GPIO_CFG</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ALL_GPIO_CFG &rArr; GPIO_CAP_Test_CFG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CAP_Test_CFG
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AD7176_CFG
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Motor_CFG
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Analog_Switch_CFG
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Sensor_CFG
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Drive_CFG
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IIC_CFG
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LCD_CFG
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>

<P><STRONG><a name="[163]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>

<P><STRONG><a name="[c]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ETH_Parameter_To_EEPROM
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETH_Parameter_From_EEPROM
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeFormat_Set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETH_Parameter_From_EEPROM
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[164]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[165]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_System_Name
</UL>

<P><STRONG><a name="[166]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_System_Name
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
</UL>

<P><STRONG><a name="[167]"></a>Write_double_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
</UL>

<P><STRONG><a name="[168]"></a>read_double_data</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
</UL>

<P><STRONG><a name="[12b]"></a>Valve_Drive</STRONG> (Thumb, 494 bytes, Stack size 12 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Light_Check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Baipanji
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Standby_Pos_Set
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safe_Protect_Trigger_Gas
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVolts_TEST_Relay_RESET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
</UL>

<P><STRONG><a name="[169]"></a>Read_Sensor_Status</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Read_Sensor_Status &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
</UL>

<P><STRONG><a name="[16a]"></a>Wait_Sensor_Signal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sup_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[7]"></a>Relay_Drive</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Valve
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Software_Reset_Hander
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_RESET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vsrc_RES_TEST_SET
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Enable_RES_Test
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_RESET
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_RESET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_RESET
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_SET
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVolts_TEST_Relay_RESET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_RESET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_RESET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>beep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = beep &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
</UL>

<P><STRONG><a name="[29]"></a>MOVE_debug_Fun</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = MOVE_debug_Fun &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>RG_Light_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sup_fun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
</UL>

<P><STRONG><a name="[16f]"></a>Display_Test_Result</STRONG> (Thumb, 870 bytes, Stack size 40 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Display_Test_Result &rArr; Get_TEST_Station &rArr; Read_Signal_Reg_Value &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RG_Light_Set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
</UL>

<P><STRONG><a name="[172]"></a>Drive_Baipanji</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Drive_Baipanji &rArr; Valve_Drive
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
</UL>

<P><STRONG><a name="[173]"></a>LED_Light_Check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_Light_Check &rArr; Valve_Drive
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>Debug_Banpanji</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Debug_Banpanji &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Baipanji
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[239]"></a>AD_Sample_Rate_Set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ad7176.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vsrc_RES_TEST_SET
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_SET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
</UL>

<P><STRONG><a name="[176]"></a>Read_AD7176_Voltage</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Configure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Read_Data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
</UL>

<P><STRONG><a name="[178]"></a>Read_AD7176_Voltage_mV</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ad7176.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
</UL>

<P><STRONG><a name="[140]"></a>Read_AD7176_Average_Voltage_mV</STRONG> (Thumb, 246 bytes, Stack size 864 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_RES_Check
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LED_Vlots
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LDO_Volts
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hall_Ouput_Vlots
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TVS_Diode_Volts
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Diode_Volts
</UL>

<P><STRONG><a name="[179]"></a>Read_AD7176_Voltage_mV_Auto</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, ad7176.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Configure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Read_Data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17a]"></a>Initialize_AD7176</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Initialize_AD7176 &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Read_Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>

<P><STRONG><a name="[17b]"></a>STM32_Software_Reset_Hander</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32_Software_Reset_Hander &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUISP_Hander
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>MCUISP_Hander</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCUISP_Hander &rArr; STM32_Software_Reset_Hander &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Software_Reset_Hander
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareMCUISPHandler
</UL>

<P><STRONG><a name="[17d]"></a>SwitchBoardDisconnect_COMA</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchBoardDisconnect_COMA
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
</UL>

<P><STRONG><a name="[17e]"></a>SwitchBoardDisconnect_COMB</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchBoardDisconnect_COMB
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
</UL>

<P><STRONG><a name="[17f]"></a>SwitchBoardDisconnect_COMC</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchBoardDisconnect_COMC
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
</UL>

<P><STRONG><a name="[180]"></a>SwitchBoardDisconnect_COMD</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchBoardDisconnect_COMD
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
</UL>

<P><STRONG><a name="[181]"></a>SwitchBoardClose_All_Point</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwitchBoardClose_All_Point &rArr; SwitchBoardDisconnect_COMD
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMD
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMC
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMB
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardDisconnect_COMA
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
</UL>

<P><STRONG><a name="[182]"></a>SwitchBoardOpen_Single_Point</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SwitchBoardOpen_Single_Point &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
</UL>

<P><STRONG><a name="[187]"></a>MainBoard_Close_All_Point</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, analog_switch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
</UL>

<P><STRONG><a name="[183]"></a>MainBoard_Open_Single_Point</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MainBoard_Open_Single_Point &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
</UL>

<P><STRONG><a name="[184]"></a>Open_Single_Point</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Open_Single_Point &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoard_Open_Single_Point
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardOpen_Single_Point
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Four_Point
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Three_Point
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
</UL>

<P><STRONG><a name="[186]"></a>Close_All_Point</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Close_All_Point &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoard_Close_All_Point
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardClose_All_Point
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
</UL>

<P><STRONG><a name="[188]"></a>Open_Two_Point</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Open_Two_Point &rArr; Open_Single_Point &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>

<P><STRONG><a name="[189]"></a>Open_Three_Point</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, analog_switch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
</UL>

<P><STRONG><a name="[18a]"></a>Open_Four_Point</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, analog_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Open_Four_Point &rArr; Open_Single_Point &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
</UL>

<P><STRONG><a name="[278]"></a>Clear_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
</UL>

<P><STRONG><a name="[18b]"></a>writeir</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeir
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reverse
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imagedraw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageclear
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdputchar
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
</UL>

<P><STRONG><a name="[18c]"></a>writeddr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reverse
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imagedraw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageclear
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdputchar
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
</UL>

<P><STRONG><a name="[18d]"></a>lcdputchar</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcdputchar &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writestring
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
</UL>

<P><STRONG><a name="[12a]"></a>lcdpos</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcdpos &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareMCUISPHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
</UL>

<P><STRONG><a name="[129]"></a>lcdreset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcdreset &rArr; writeir
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Hand_Scan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Clear
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ParmeterYesOrNO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareMCUISPHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_RF_IC
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
</UL>

<P><STRONG><a name="[18e]"></a>writestring</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writestring &rArr; lcdputchar &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdputchar
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>

<P><STRONG><a name="[16c]"></a>cyc4or3set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd3033.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
</UL>

<P><STRONG><a name="[147]"></a>cyc4or3run</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cyc4or3run &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdputchar
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Hand_Scan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoard_Open_Single_Point
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardOpen_Single_Point
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Direction
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Clear
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ParmeterYesOrNO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayETHPar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format_Configuration
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
</UL>

<P><STRONG><a name="[190]"></a>Clear_Screen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd3033.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>

<P><STRONG><a name="[191]"></a>imageclear</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = imageclear &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
</UL>

<P><STRONG><a name="[192]"></a>imagedraw</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lcd3033.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>

<P><STRONG><a name="[118]"></a>lcd_printf</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writestring
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Hand_Scan
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoard_Open_Single_Point
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBoardOpen_Single_Point
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Direction
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Clear
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ParmeterYesOrNO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayETHPar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format_Configuration
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareMCUISPHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_RF_IC
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
</UL>

<P><STRONG><a name="[194]"></a>Set_Reverse</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lcd3033.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set_Reverse &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
</UL>

<P><STRONG><a name="[196]"></a>I2C0_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Create_Block_Command
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>

<P><STRONG><a name="[197]"></a>I2C0_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Create_Block_Command
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>

<P><STRONG><a name="[198]"></a>I2C0_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read_Byte
</UL>

<P><STRONG><a name="[199]"></a>I2C0_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read_Byte
</UL>

<P><STRONG><a name="[19a]"></a>I2C0_Wait_Ack</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Create_Block_Command
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>

<P><STRONG><a name="[19b]"></a>I2C0_Send_Ack</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ad5933.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[19c]"></a>I2C0_Send_Byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C0_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Create_Block_Command
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>

<P><STRONG><a name="[19d]"></a>I2C0_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_Read_Byte &rArr; I2C0_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Ack
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_NAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
</UL>

<P><STRONG><a name="[1aa]"></a>LCR_Test</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LCR_Test &rArr; AD5933_Set_Parameter &rArr; AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Real_imag_data
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pf_Cap_Value
</UL>

<P><STRONG><a name="[1ac]"></a>AD5933_Initalize</STRONG> (Thumb, 276 bytes, Stack size 144 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = AD5933_Initalize &rArr; AD5933_Calibration &rArr; Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mini_CAP_Test_GPIO
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
</UL>

<P><STRONG><a name="[1ad]"></a>Init_TIM3</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_TIM3 &rArr; TIM_ETRClockMode2Config &rArr; TIM_ETRConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
</UL>

<P><STRONG><a name="[95]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>Init_TIM5</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_TIM5 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
</UL>

<P><STRONG><a name="[aa]"></a>TIM5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>Get_Pulse_Fre</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Pulse_Fre &rArr; Init_TIM3 &rArr; TIM_ETRClockMode2Config &rArr; TIM_ETRConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
</UL>

<P><STRONG><a name="[1b3]"></a>Get_Color_Fre</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, fre.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Get_Color_Fre &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
</UL>

<P><STRONG><a name="[3f7]"></a>Init_Fre_Test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fre.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[162]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[160]"></a>IIC_Wait_Ack</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[1b4]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[1b5]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[15f]"></a>IIC_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[161]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[1b6]"></a>Net_IIC_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Net_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
</UL>

<P><STRONG><a name="[1b7]"></a>Idle_IIC_BUS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[1b8]"></a>Net_IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Net_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByteFromDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NByteDataToDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OneByteToDevice
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByte_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_Byte_Data
</UL>

<P><STRONG><a name="[1b9]"></a>Net_IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Net_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByteFromDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NByteDataToDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OneByteToDevice
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByte_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_Byte_Data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[1ba]"></a>Net_IIC_Wait_Ack</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Net_IIC_Wait_Ack &rArr; Net_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByteFromDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NByteDataToDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OneByteToDevice
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByte_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_Byte_Data
</UL>

<P><STRONG><a name="[1bb]"></a>Net_IIC_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Net_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
</UL>

<P><STRONG><a name="[1bc]"></a>Net_IIC_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Net_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
</UL>

<P><STRONG><a name="[1bd]"></a>Net_IIC_Send_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Net_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByteFromDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_NByteDataToDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OneByteToDevice
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByte_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_Byte_Data
</UL>

<P><STRONG><a name="[1be]"></a>Net_IIC_Read_Byte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Net_IIC_Read_Byte &rArr; Net_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_NAck
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByteFromDevice
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NByte_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_Byte_Data
</UL>

<P><STRONG><a name="[1bf]"></a>Read_One_Byte_Data</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>

<P><STRONG><a name="[1c0]"></a>Read_NByte_Data</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>

<P><STRONG><a name="[1c1]"></a>Write_OneByteToDevice</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>

<P><STRONG><a name="[1c2]"></a>Write_NByteDataToDevice</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>

<P><STRONG><a name="[1c3]"></a>Read_OneByteFromDevice</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_OneByteFromDevice &rArr; Net_IIC_Read_Byte &rArr; Net_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
</UL>

<P><STRONG><a name="[1c4]"></a>Read_NByteFromDevice</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, net_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Read_Byte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Send_Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Wait_Ack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Start
</UL>

<P><STRONG><a name="[f7]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; lcdputchar &rArr; writeddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdputchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>COM_TransString</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>

<P><STRONG><a name="[1c6]"></a>Uart_Putchar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Prinf_Hex
</UL>

<P><STRONG><a name="[1c5]"></a>Uart_Prinf_Hex</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Putchar
</UL>

<P><STRONG><a name="[128]"></a>Uart_printf</STRONG> (Thumb, 42 bytes, Stack size 160 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_TransString
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Sotp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadFixtureConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Test_Item
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadShortGroup
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareMCUISPHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareClearHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStationNum_Handler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RF_Total_Result
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
</UL>

<P><STRONG><a name="[261]"></a>_Uart_printf</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Reg_Val
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Reg_Val
</UL>

<P><STRONG><a name="[1c8]"></a>Get_USART_buffer</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_PORT_Number
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_Mode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_GATEWAY
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_netmask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_ip_Address
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
</UL>

<P><STRONG><a name="[1cc]"></a>_Get_USART_buffer</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Reg_Val
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Reg_Val
</UL>

<P><STRONG><a name="[1cd]"></a>RESET_UART</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RESET_UART
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Reg_Val
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Reg_Val
</UL>

<P><STRONG><a name="[126]"></a>Read_USART_buffer</STRONG> (Thumb, 306 bytes, Stack size 12 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Read_USART_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
</UL>

<P><STRONG><a name="[127]"></a>uart1_init</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartBps
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
</UL>

<P><STRONG><a name="[9d]"></a>USART1_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; Software_Cmd_Hander &rArr; WTB_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Cmd_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>uart2_init</STRONG> (Thumb, 306 bytes, Stack size 80 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = uart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartBps
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
</UL>

<P><STRONG><a name="[9e]"></a>USART2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; Software_Cmd_Hander &rArr; WTB_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Cmd_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>uart3_init</STRONG> (Thumb, 326 bytes, Stack size 80 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartBps
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudCondition
</UL>

<P><STRONG><a name="[9f]"></a>USART3_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; Software_Cmd_Hander &rArr; WTB_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Cmd_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>uart4_init</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, uart4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[ac]"></a>UART4_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>uart5_init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart5_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>UART5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, uart5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART5_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>InitUartBps</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = InitUartBps &rArr; uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>Get_Scan_Result</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Get_Scan_Result &rArr; ZDT_Software_Get_Scan_Result &rArr; Software_Trigger_Scan &rArr; BarcodeReaderTrigger &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Sotp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Hand_Scan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
</UL>

<P><STRONG><a name="[1e6]"></a>Test_Up_Down_Move</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = Test_Up_Down_Move &rArr; Up_Down_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Sotp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
</UL>

<P><STRONG><a name="[1e8]"></a>Check_Test_Condition</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = Check_Test_Condition &rArr; Block_Recognition &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
</UL>

<P><STRONG><a name="[1eb]"></a>System_Start</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = System_Start &rArr; Check_Test_Condition &rArr; Block_Recognition &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>main</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1868 + Unknown Stack Size
<LI>Call Chain = main &rArr; resetMCU &rArr; Self_Test_DAC_line &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Fixture
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartBps
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Light_Check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_CFG
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3f8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>Average_Fun</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Average_Fun &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LED_Vlots
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>

<P><STRONG><a name="[1f6]"></a>resetMCU</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1868 + Unknown Stack Size
<LI>Call Chain = resetMCU &rArr; Self_Test_DAC_line &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Scan_Configration
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>Safe_Protect_Trigger_Gas</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Safe_Protect_Trigger_Gas &rArr; Valve_Drive
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
</UL>

<P><STRONG><a name="[16e]"></a>startkeywait</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Soft_Start_Status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safe_Protect_Trigger_Gas
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Vol_Color_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
</UL>

<P><STRONG><a name="[16d]"></a>Get_start_key_val</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_start_key_val &rArr; beep &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ParmeterYesOrNO
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
</UL>

<P><STRONG><a name="[203]"></a>getstarttime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getstarttime
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Soft_Start_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettestmode
</UL>

<P><STRONG><a name="[1ed]"></a>gettestmode</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gettestmode &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reverse
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageclear
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstarttime
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
</UL>

<P><STRONG><a name="[185]"></a>step_test_mode_get_key</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeir
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Clear
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
</UL>

<P><STRONG><a name="[204]"></a>GetKey_Status</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetKey_Status &rArr; beep &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
</UL>

<P><STRONG><a name="[205]"></a>Getkey_Cursor</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, other.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Getkey_Cursor &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
</UL>

<P><STRONG><a name="[206]"></a>Choice_Menu</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Enable_Set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Enable_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeCheckEnable_Set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReader_Set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeMode_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Push_Privious_Or_Next
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
</UL>

<P><STRONG><a name="[207]"></a>Choice_Menu_Num</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Speed_Set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Time_Set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Cycle_Set
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeLength_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Time_Set
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Previous_Wait_Time_Set
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Dealy_Set
</UL>

<P><STRONG><a name="[208]"></a>Password_Input</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[20b]"></a>char_Check</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
</UL>

<P><STRONG><a name="[20a]"></a>String_Set_Fun</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = String_Set_Fun &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_Check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeFormat_Set
</UL>

<P><STRONG><a name="[20c]"></a>Menu_Click</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reverse
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageclear
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
</UL>

<P><STRONG><a name="[20d]"></a>Menu_List_Fun</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Click
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMode
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Parameter_Set
</UL>

<P><STRONG><a name="[19]"></a>System_Parameter_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = System_Parameter_Set &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1ec]"></a>Set_Scan_Result</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Scan_Result
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
</UL>

<P><STRONG><a name="[2d2]"></a>Get_Scan_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, barcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
</UL>

<P><STRONG><a name="[1e2]"></a>Check_Hand_Scan</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Check_Hand_Scan &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
</UL>

<P><STRONG><a name="[20e]"></a>ZDT_Upper_Cmd_Check</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, barcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[211]"></a>Read_Barcode_Format_Configuration</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Read_Barcode_Format_Configuration &rArr; Read_Barcode_Format &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
</UL>

<P><STRONG><a name="[212]"></a>Read_Barcode_Reader_Configuration</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Read_Barcode_Reader_Configuration &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format_Configuration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Scan_Configration
</UL>

<P><STRONG><a name="[1fa]"></a>Read_Scan_Configration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Read_Scan_Configration &rArr; Read_Barcode_Reader_Configuration &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
</UL>

<P><STRONG><a name="[216]"></a>BarcodeReaderTrigger</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = BarcodeReaderTrigger &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
</UL>

<P><STRONG><a name="[217]"></a>Software_Trigger_Scan</STRONG> (Thumb, 166 bytes, Stack size 136 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Software_Trigger_Scan &rArr; BarcodeReaderTrigger &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
</UL>

<P><STRONG><a name="[21]"></a>Scan_Push_Privious_Or_Next</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Scan_Push_Privious_Or_Next &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Scan_Time_Set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Scan_Time_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>BarcodeMode_Set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = BarcodeMode_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>BarcodeReader_Set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = BarcodeReader_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>BarcodeReaderBauds_Set</STRONG> (Thumb, 150 bytes, Stack size 184 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = BarcodeReaderBauds_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>BarcodeCheckEnable_Set</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = BarcodeCheckEnable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>BarcodeLength_Set</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = BarcodeLength_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>BarcodeFormat_Set</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = BarcodeFormat_Set &rArr; String_Set_Fun &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String_Set_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>BarcodeReaderTriggerTest</STRONG> (Thumb, 542 bytes, Stack size 144 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = BarcodeReaderTriggerTest &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTrigger
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> barcode.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Scan_Set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Scan_Set &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.data)
<LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>Self_Check_Fun</STRONG> (Thumb, 1960 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1892 + Unknown Stack Size
<LI>Call Chain = Self_Check_Fun &rArr; Self_Test_DAC_line &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>DebugMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = DebugMode &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[21d]"></a>Get_Take_OFF_Enable_bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hold_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Take_OFF_Enable_bit &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
</UL>

<P><STRONG><a name="[21e]"></a>Get_PASS_Row_Num</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hold_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_PASS_Row_Num &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
</UL>

<P><STRONG><a name="[21f]"></a>Save_Hold_Reg_data</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, hold_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Save_Hold_Reg_data &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Speed_Set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
</UL>

<P><STRONG><a name="[1f3]"></a>Read_Hold_Reg_data</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, hold_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Read_Hold_Reg_data &rArr; Save_Hold_Reg_data &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>List_Auto_Test_Fun</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, list_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = List_Auto_Test_Fun &rArr; Short_Test_Function &rArr; Step_Test_RES &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Test_Item
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>List_Step_Test_Fun</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, list_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = List_Step_Test_Fun &rArr; Short_Test_Function &rArr; Step_Test_RES &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1f2]"></a>InitTestConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, test_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[221]"></a>Get_Currennt_Type_CNT</STRONG> (Thumb, 990 bytes, Stack size 16 bytes, test_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Currennt_Type_CNT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Fixture
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>

<P><STRONG><a name="[231]"></a>StringCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eth_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
</UL>

<P><STRONG><a name="[23f]"></a>Get_ETH_ip_Addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eth_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>

<P><STRONG><a name="[3f9]"></a>IP4_ADDR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eth_config.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>CheckIPAdddr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckIPAdddr
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_GATEWAY
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_netmask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_ip_Address
</UL>

<P><STRONG><a name="[225]"></a>displayETHPar</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = displayETHPar &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[226]"></a>Read_NET_ip_Address</STRONG> (Thumb, 104 bytes, Stack size 152 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Read_NET_ip_Address &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPAdddr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[228]"></a>Read_NET_netmask</STRONG> (Thumb, 98 bytes, Stack size 152 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Read_NET_netmask &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPAdddr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[229]"></a>Read_NET_GATEWAY</STRONG> (Thumb, 100 bytes, Stack size 152 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Read_NET_GATEWAY &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPAdddr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[22a]"></a>Read_NET_Mode</STRONG> (Thumb, 148 bytes, Stack size 144 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Read_NET_Mode &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[22b]"></a>Net_Connect_Test</STRONG> (Thumb, 98 bytes, Stack size 144 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[22c]"></a>Read_NET_PORT_Number</STRONG> (Thumb, 178 bytes, Stack size 152 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Read_NET_PORT_Number &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
</UL>

<P><STRONG><a name="[22d]"></a>Ip_Set_fun</STRONG> (Thumb, 590 bytes, Stack size 120 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Ip_Set_fun &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getkey_Cursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
</UL>

<P><STRONG><a name="[22f]"></a>Read_Parameter_From_ETHModulea</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Read_Parameter_From_ETHModulea &rArr; Read_NET_PORT_Number &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_PORT_Number
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_Mode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_GATEWAY
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_netmask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_ip_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[230]"></a>Write_Parameter_To_ETHModulea</STRONG> (Thumb, 760 bytes, Stack size 280 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Write_Parameter_To_ETHModulea &rArr; Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCheck
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[232]"></a>SET_ParmeterYesOrNO</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SET_ParmeterYesOrNO &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
</UL>

<P><STRONG><a name="[233]"></a>Config_ETH_IP</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Config_ETH_IP &rArr; Write_Parameter_To_ETHModulea &rArr; Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ETH_Parameter_To_EEPROM
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[1f9]"></a>InitaServerPar</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = InitaServerPar &rArr; Config_ETH_IP &rArr; Write_Parameter_To_ETHModulea &rArr; Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ETH_Parameter_To_EEPROM
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETH_Parameter_From_EEPROM
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Parameter_From_ETHModulea
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayETHPar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
</UL>

<P><STRONG><a name="[1d]"></a>ETH_NET_Set</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, eth_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ETH_NET_Set &rArr; Write_Parameter_To_ETHModulea &rArr; Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ETH_Parameter_To_EEPROM
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ParmeterYesOrNO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayETHPar
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>UploadFixtureConfig</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, base_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = UploadFixtureConfig &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[1f5]"></a>Init_Fixture</STRONG> (Thumb, 1152 bytes, Stack size 88 bytes, base_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Init_Fixture &rArr; Init_Smaple_Test_Notice &rArr; Init_TIM4 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Smaple_Test_Notice
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>TEST_Station_Set</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, base_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = TEST_Station_Set &rArr; Config_ETH_IP &rArr; Write_Parameter_To_ETHModulea &rArr; Net_Connect_Test &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>Get_TEST_Station</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, base_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Get_TEST_Station &rArr; Read_Signal_Reg_Value &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[238]"></a>Block_RES_Check</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, block_check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Block_RES_Check &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
</UL>

<P><STRONG><a name="[1ea]"></a>Block_Recognition</STRONG> (Thumb, 358 bytes, Stack size 136 bytes, block_check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = Block_Recognition &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_RES_Check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
</UL>

<P><STRONG><a name="[21a]"></a>Save_Single_Reg_Value</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Clear
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Enable_Set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Time_Set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Enable_Set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Cycle_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Reg_Value
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeLength_Set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeCheckEnable_Set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReader_Set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeMode_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Time_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Push_Privious_Or_Next
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Previous_Wait_Time_Set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Dealy_Set
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
</UL>

<P><STRONG><a name="[237]"></a>Read_Signal_Reg_Value</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Read_Signal_Reg_Value &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
</UL>

<P><STRONG><a name="[1ef]"></a>Display_Total_Rate</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>

<P><STRONG><a name="[23b]"></a>Get_Compile_Time</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Get_Compile_Time &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>

<P><STRONG><a name="[12c]"></a>RevertStartupScreen</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Satation
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Compile_Time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ETH_ip_Addr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Banpanji
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOVE_debug_Fun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usmart_Debug_Fun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smaple_Notice_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IC_ID_Debug
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ananlog_Switch_debug_fun
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Previous_Wait_Time_Set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Dealy_Set
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Parameter_Set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareClearHandler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_RF_IC
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
</UL>

<P><STRONG><a name="[14]"></a>clear_counter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = clear_counter &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareClearHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[240]"></a>Read_System_Name</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, reg_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[1b]"></a>System_Name_Set_Fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, reg_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[234]"></a>Write_ETH_Parameter_To_EEPROM</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Write_ETH_Parameter_To_EEPROM &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ETH_IP
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_NET_Set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[235]"></a>Read_ETH_Parameter_From_EEPROM</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Read_ETH_Parameter_From_EEPROM &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitaServerPar
</UL>

<P><STRONG><a name="[241]"></a>Read_pF_Capacitor_offset</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Read_pF_Capacitor_offset &rArr; AD5933_Initalize &rArr; AD5933_Calibration &rArr; Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
</UL>

<P><STRONG><a name="[242]"></a>Write_pF_Capacitor_offset</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Write_pF_Capacitor_offset &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
</UL>

<P><STRONG><a name="[1f4]"></a>Read_All_Reg_Value</STRONG> (Thumb, 554 bytes, Stack size 80 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = Read_All_Reg_Value &rArr; Read_pF_Capacitor_offset &rArr; AD5933_Initalize &rArr; AD5933_Calibration &rArr; Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareReadHandler
</UL>

<P><STRONG><a name="[243]"></a>Reset_All_Reg_Value</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, reg_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Reset_All_Reg_Value &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareResetHandler
</UL>

<P><STRONG><a name="[244]"></a>Init_TIM4</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_TIM4 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Smaple_Test_Notice
</UL>

<P><STRONG><a name="[96]"></a>TIM4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[236]"></a>Init_Smaple_Test_Notice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_Smaple_Test_Notice &rArr; Init_TIM4 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Fixture
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
</UL>

<P><STRONG><a name="[245]"></a>Display_Sample_Time</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Display_Sample_Time &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Time_Display
</UL>

<P><STRONG><a name="[41]"></a>Sample_Notice_Enable_Set</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Sample_Notice_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Smaple_Test_Notice
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_notice.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>Sample_Cycle_Set</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Sample_Cycle_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_notice.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>Sample_Time_Display</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Sample_Time_Display &rArr; Display_Sample_Time &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_notice.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>Smaple_Notice_Set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Smaple_Notice_Set &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[24a]"></a>Sample_Notice_Message</STRONG> (Thumb, 822 bytes, Stack size 48 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Sample_Notice_Message &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
</UL>

<P><STRONG><a name="[201]"></a>Sample_Notice_Check</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sample_notice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Sample_Notice_Check &rArr; Sample_Notice_Message &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
</UL>

<P><STRONG><a name="[44]"></a>Dot_Enable_Set</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Dot_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>Dot_Time_Set</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Dot_Time_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>Dot_CNT_Enable_Set</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Dot_CNT_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>Dot_CNT_Set</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Dot_CNT_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>Dot_CNT_Clear</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Dot_CNT_Clear &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[200]"></a>Dot_Pen_Replace_Check</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
</UL>

<P><STRONG><a name="[18]"></a>Dot_Set</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Dot_Set &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Debug_SETUP_Flag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(.data)
<LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>Product_Mark_Dot</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, dot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Product_Mark_Dot &rArr; Dot_Move &rArr; Motor_Move &rArr; Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>GPIO_Initialize_Motor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Initialize_Motor &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> motor.o(.text)
<LI> usb_move.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>Init_TIM6_PWM</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_TIM6_PWM &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
</UL>

<P><STRONG><a name="[ae]"></a>TIM6_IRQHandler</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM6_IRQHandler &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>Motor_Move</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Motor_Move &rArr; Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TIM6_PWM
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Direction
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
</UL>

<P><STRONG><a name="[252]"></a>Motor_Limit_Check</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_Limit_Check &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Software_Reset_Hander
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Software_Reset_Hander
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[257]"></a>Motor_Setup</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Motor_Setup &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
</UL>

<P><STRONG><a name="[24d]"></a>Dot_Move</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Dot_Move &rArr; Motor_Move &rArr; Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Standby_Pos_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
</UL>

<P><STRONG><a name="[1fd]"></a>Initialize_Motor</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Initialize_Motor &rArr; Dot_Move &rArr; Motor_Move &rArr; Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
</UL>

<P><STRONG><a name="[24c]"></a>Set_Motor_Debug_SETUP_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
</UL>

<P><STRONG><a name="[259]"></a>Motor_Dot_Enable_Set</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Debug_SETUP_Flag
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[25a]"></a>Motor_Speed_Set</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Motor_Speed_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RESET_Speed_Set
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SET_Speed_Set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RESET_Speed_Set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Speed_Set
</UL>

<P><STRONG><a name="[4a]"></a>Motor_Dot_Speed_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Motor_Dot_Speed_Set &rArr; Motor_Speed_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>Motor_RESET_Speed_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Motor_RESET_Speed_Set &rArr; Motor_Speed_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>Motor_Pos_Set</STRONG> (Thumb, 668 bytes, Stack size 64 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Motor_Pos_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Debug_SETUP_Flag
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SET_Pos_Set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Up_Pos_Set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Standby_Pos_Set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Pos_Set
</UL>

<P><STRONG><a name="[4c]"></a>Motor_Dot_Pos_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Motor_Dot_Pos_Set &rArr; Motor_Pos_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>Motor_Standby_Pos_Set</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Motor_Standby_Pos_Set &rArr; Motor_Pos_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>Motor_Up_Pos_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Motor_Up_Pos_Set &rArr; Motor_Pos_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dot.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>Init_USB_Move_Motor</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Init_USB_Move_Motor &rArr; Motor_Setup &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
</UL>

<P><STRONG><a name="[25c]"></a>USB_MOVE</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, usb_move.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>

<P><STRONG><a name="[51]"></a>USB_Move_Display</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = USB_Move_Display &rArr; Dot_Move &rArr; Motor_Move &rArr; Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_move.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>USB_Motor_Enable_Set</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = USB_Motor_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Debug_SETUP_Flag
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_move.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>USB_SET_Speed_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = USB_SET_Speed_Set &rArr; Motor_Speed_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_move.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>USB_SET_Pos_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = USB_SET_Pos_Set &rArr; Motor_Pos_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_move.o(.data)
</UL>
<P><STRONG><a name="[25d]"></a>USB_RESET_Speed_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_move.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
</UL>

<P><STRONG><a name="[bb]"></a>USB_Move_Set</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, usb_move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = USB_Move_Set &rArr; Menu_List_Fun &rArr; Menu_Click &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Setup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Debug_SETUP_Flag
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>Convert_Big</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
</UL>

<P><STRONG><a name="[269]"></a>Half_Convert_Big_uint32_t</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
</UL>

<P><STRONG><a name="[25e]"></a>FReadCoils</STRONG> (Thumb, 224 bytes, Stack size 160 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Big
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[262]"></a>FWriteSingleCoil</STRONG> (Thumb, 222 bytes, Stack size 152 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FWriteSingleCoil &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Big
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Enable_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>

<P><STRONG><a name="[263]"></a>FReadInputStatusReg</STRONG> (Thumb, 222 bytes, Stack size 160 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FReadInputStatusReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Big
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
</UL>

<P><STRONG><a name="[264]"></a>FReadHoldingReg</STRONG> (Thumb, 240 bytes, Stack size 160 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Big
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
</UL>

<P><STRONG><a name="[265]"></a>FWriteHoldingReg</STRONG> (Thumb, 306 bytes, Stack size 160 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FWriteHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_CRC16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Big
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
</UL>

<P><STRONG><a name="[3fa]"></a>Communication_Test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modbus.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>Read_InputStatus</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Read_InputStatus &rArr; FReadInputStatusReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>

<P><STRONG><a name="[267]"></a>Get_LEC_Current_Postion</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
</UL>

<P><STRONG><a name="[268]"></a>Protect_Fun</STRONG> (Thumb, 408 bytes, Stack size 328 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Convert_Big_uint32_t
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
</UL>

<P><STRONG><a name="[26a]"></a>Check_Coordinate</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Check_Coordinate &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
</UL>

<P><STRONG><a name="[26b]"></a>Running_Position</STRONG> (Thumb, 744 bytes, Stack size 408 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Convert_Big_uint32_t
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
</UL>

<P><STRONG><a name="[26c]"></a>XY_Protect_Fun</STRONG> (Thumb, 410 bytes, Stack size 328 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Convert_Big_uint32_t
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[26d]"></a>Axis_Running_Position</STRONG> (Thumb, 896 bytes, Stack size 416 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Convert_Big_uint32_t
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[260]"></a>Modbus_CRC16</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Modbus_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
</UL>

<P><STRONG><a name="[1e9]"></a>TAKE_OFF_EACT_MOVE</STRONG> (Thumb, 142 bytes, Stack size 104 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = TAKE_OFF_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Test_Condition
</UL>

<P><STRONG><a name="[1f1]"></a>Take_OFF_Products</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = Take_OFF_Products &rArr; TAKE_OFF_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Baipanji
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sensor_Status
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PASS_Row_Num
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Take_OFF_Enable_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Take_FAIL_Product
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Take_PASS_Product
</UL>

<P><STRONG><a name="[b7]"></a>Take_Product_EACT_set</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_set &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[1fc]"></a>Init_Take_OFF_EACT</STRONG> (Thumb, 908 bytes, Stack size 16 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Init_Take_OFF_EACT &rArr;  Take_Product_EACT_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Take_FAIL_Product
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Take_PASS_Product
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Enable_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
</UL>

<P><STRONG><a name="[26e]"></a>Take_Product_Enable_Set</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Take_Product_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Push_Enable_Set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_NG_Enable_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Enable_Set
</UL>

<P><STRONG><a name="[26f]"></a>Take_Product_Num_Set</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Take_Product_Num_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_OK_Num_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_NG_Num_Set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Speed_Set
</UL>

<P><STRONG><a name="[270]"></a>Take_Product_Position_Set</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Take_Product_Position_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Product_Postion_Set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Standby_Postion_Set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_NG_Postion_Set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_OK_Postion_Set
</UL>

<P><STRONG><a name="[53]"></a>Take_Product_EACT_Enable_Set</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_Enable_Set &rArr; Take_Product_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>Take_Product_NG_Enable_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Take_Product_NG_Enable_Set &rArr; Take_Product_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>Take_Product_Push_Enable_Set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Take_Product_Push_Enable_Set &rArr; Take_Product_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>Take_Product_EACT_Speed_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_Speed_Set &rArr; Take_Product_Num_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>Take_Product_EACT_NG_Num_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_NG_Num_Set &rArr; Take_Product_Num_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>Take_Product_EACT_OK_Num_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_OK_Num_Set &rArr; Take_Product_Num_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>Take_Product_EACT_OK_Postion_Set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_OK_Postion_Set &rArr; Take_Product_Position_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>Take_Product_EACT_NG_Postion_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_NG_Postion_Set &rArr; Take_Product_Position_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>Take_Product_EACT_Standby_Postion_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_Standby_Postion_Set &rArr; Take_Product_Position_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>Take_Product_EACT_Product_Postion_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Take_Product_EACT_Product_Postion_Set &rArr; Take_Product_Position_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>Show_Take_PASS_Product</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = Show_Take_PASS_Product &rArr; Take_OFF_Products &rArr; TAKE_OFF_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>Show_Take_FAIL_Product</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = Show_Take_FAIL_Product &rArr; Take_OFF_Products &rArr; TAKE_OFF_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_OFF_Products
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> x_axis.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>Up_Down_EACT_set</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_set &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_List_Fun
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>Init_Up_Down_EACT</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Init_Up_Down_EACT &rArr;  Up_Down_EACT_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_InputStatus
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
</UL>

<P><STRONG><a name="[5f]"></a>Up_Down_EACT_Enable_Set</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_Enable_Set &rArr; Choice_Menu &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> y_axis.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>Up_Down_EACT_Speed_Set</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_Speed_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> y_axis.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>Up_Down_EACT_Standy_Set</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_Standy_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> y_axis.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>Up_Down_EACT_Push_Set</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_Push_Set &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> y_axis.o(.data)
</UL>
<P><STRONG><a name="[1e7]"></a>Up_Down_EACT_MOVE</STRONG> (Thumb, 276 bytes, Stack size 112 bytes, y_axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = Up_Down_EACT_MOVE &rArr; Running_Position &rArr; Protect_Fun &rArr; Get_LEC_Current_Postion &rArr; FReadHoldingReg &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
</UL>

<P><STRONG><a name="[21b]"></a>Enable_RES_Test_Analog_Switch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Enable_RES_Test_Analog_Switch &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
</UL>

<P><STRONG><a name="[21c]"></a>Disable_RES_Test_Analog_Switch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Disable_RES_Test_Analog_Switch &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
</UL>

<P><STRONG><a name="[271]"></a>Vsrc_RES_TEST_SET</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[272]"></a>Res_2wire_Test</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>

<P><STRONG><a name="[273]"></a>Res_4wire_Test</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Res_4wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
</UL>

<P><STRONG><a name="[274]"></a>Res_2wire_Test_Mohm</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
</UL>

<P><STRONG><a name="[15]"></a>Search_Point_Function</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = Search_Point_Function &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>Self_Check_Ananlog_Switch</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = Self_Check_Ananlog_Switch &rArr; Res_4wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Four_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMCU
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>Short_Self_Check</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = Short_Self_Check &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>Ananlog_Switch_debug_fun</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Ananlog_Switch_debug_fun &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Single_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Type_Isrc_Test_Fun</STRONG> (Thumb, 1412 bytes, Stack size 240 bytes, mr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + Unknown Stack Size
<LI>Call Chain = Type_Isrc_Test_Fun &rArr; mohm_4wire_Test_Res &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Four_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[279]"></a>Kohm_Test</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, kohm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = Kohm_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
</UL>

<P><STRONG><a name="[27a]"></a>KOhm_RES_Test</STRONG> (Thumb, 1020 bytes, Stack size 256 bytes, kohm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260 + Unknown Stack Size
<LI>Call Chain = KOhm_RES_Test &rArr; Kohm_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
</UL>

<P><STRONG><a name="[27b]"></a>KOhm_RES_TEST_SET</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, kohm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = KOhm_RES_TEST_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
</UL>

<P><STRONG><a name="[27c]"></a>KOhm_RES_TEST_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kohm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = KOhm_RES_TEST_RESET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
</UL>

<P><STRONG><a name="[35]"></a>Type_Vsrc_Test_Fun</STRONG> (Thumb, 546 bytes, Stack size 80 bytes, kohm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340 + Unknown Stack Size
<LI>Call Chain = Type_Vsrc_Test_Fun &rArr; KOhm_RES_Test &rArr; Kohm_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_RESET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[27d]"></a>OS_Open_Relay_SET</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = OS_Open_Relay_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
</UL>

<P><STRONG><a name="[27f]"></a>Open_RES_Value_Fun</STRONG> (Thumb, 268 bytes, Stack size 200 bytes, open.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[280]"></a>Step_debug_Open</STRONG> (Thumb, 340 bytes, Stack size 208 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212 + Unknown Stack Size
<LI>Call Chain = Step_debug_Open &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
</UL>

<P><STRONG><a name="[b]"></a>Open_Test_Function</STRONG> (Thumb, 1014 bytes, Stack size 48 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = Open_Test_Function &rArr; Open_Res_Test &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[281]"></a>Open_Test_Function_V2</STRONG> (Thumb, 816 bytes, Stack size 48 bytes, open.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[282]"></a>OS_Open_Test</STRONG> (Thumb, 1290 bytes, Stack size 248 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = OS_Open_Test &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Open_Test_Fun
</UL>

<P><STRONG><a name="[33]"></a>Type_OS_Open_Test_Fun</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = Type_OS_Open_Test_Fun &rArr; OS_Open_Test &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>Short_Gooup_Edit_Check</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Short_Gooup_Edit_Check &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[284]"></a>Step_Test_RES</STRONG> (Thumb, 260 bytes, Stack size 232 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236 + Unknown Stack Size
<LI>Call Chain = Step_Test_RES &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
</UL>

<P><STRONG><a name="[a]"></a>Short_Test_Function</STRONG> (Thumb, 1086 bytes, Stack size 48 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = Short_Test_Function &rArr; Step_Test_RES &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[285]"></a>OS_Short_Test</STRONG> (Thumb, 1070 bytes, Stack size 248 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = OS_Short_Test &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_OS_Short_Test_Fun
</UL>

<P><STRONG><a name="[32]"></a>Type_OS_Short_Test_Fun</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284 + Unknown Stack Size
<LI>Call Chain = Type_OS_Short_Test_Fun &rArr; OS_Short_Test &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>ViewShortGroup</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ViewShortGroup &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[287]"></a>Diode_Test</STRONG> (Thumb, 892 bytes, Stack size 208 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = Diode_Test &rArr; Read_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Diode_Volts
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
</UL>

<P><STRONG><a name="[288]"></a>Diode_TEST_Relay_SET</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = Diode_TEST_Relay_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
</UL>

<P><STRONG><a name="[289]"></a>Diode_TEST_Relay_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = Diode_TEST_Relay_RESET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
</UL>

<P><STRONG><a name="[36]"></a>Type_Diode_Test_Fun</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260 + Unknown Stack Size
<LI>Call Chain = Type_Diode_Test_Fun &rArr; Diode_Test &rArr; Read_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_RESET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[28a]"></a>TVS_Diode_TEST_Relay_SET</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = TVS_Diode_TEST_Relay_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
</UL>

<P><STRONG><a name="[28c]"></a>TVS_Diode_Test</STRONG> (Thumb, 1016 bytes, Stack size 208 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = TVS_Diode_Test &rArr; Read_TVS_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TVS_Diode_Volts
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Diode_Volts
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
</UL>

<P><STRONG><a name="[3b]"></a>Type_TVS_Test_Fun</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + Unknown Stack Size
<LI>Call Chain = Type_TVS_Test_Fun &rArr; TVS_Diode_Test &rArr; Read_TVS_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_RESET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[28d]"></a>Set_CAP_Test_REF_RES</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Set_CAP_Test_REF_RES &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
</UL>

<P><STRONG><a name="[28e]"></a>Read_CAP_Value</STRONG> (Thumb, 640 bytes, Stack size 312 bytes, uf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268<LI>Call Chain = Read_CAP_Value &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
</UL>

<P><STRONG><a name="[28f]"></a>Max_CAP_Tests</STRONG> (Thumb, 1206 bytes, Stack size 216 bytes, uf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484 + Unknown Stack Size
<LI>Call Chain = Max_CAP_Tests &rArr; Read_CAP_Value &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Cap_Test_Fun
</UL>

<P><STRONG><a name="[37]"></a>Type_Cap_Test_Fun</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, uf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516 + Unknown Stack Size
<LI>Call Chain = Type_Cap_Test_Fun &rArr; Max_CAP_Tests &rArr; Read_CAP_Value &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[290]"></a>Max_CAP_Self_Check</STRONG> (Thumb, 398 bytes, Stack size 128 bytes, uf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
</UL>

<P><STRONG><a name="[291]"></a>Max_CAP_Calibration</STRONG> (Thumb, 336 bytes, Stack size 248 bytes, uf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_double_data
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CAP_Test_REF_RES
</UL>

<P><STRONG><a name="[293]"></a>pF_CAP_Tests</STRONG> (Thumb, 868 bytes, Stack size 208 bytes, pf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = pF_CAP_Tests &rArr; Read_pf_Cap_Value &rArr; LCR_Test &rArr; AD5933_Set_Parameter &rArr; AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pf_Cap_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_pF_Cap_Test_Fun
</UL>

<P><STRONG><a name="[38]"></a>Type_pF_Cap_Test_Fun</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, pf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = Type_pF_Cap_Test_Fun &rArr; pF_CAP_Tests &rArr; Read_pf_Cap_Value &rArr; LCR_Test &rArr; AD5933_Set_Parameter &rArr; AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[294]"></a>pF_Capacitor_Calibration</STRONG> (Thumb, 494 bytes, Stack size 192 bytes, pf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = pF_Capacitor_Calibration &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration_Fun
</UL>

<P><STRONG><a name="[b9]"></a>pF_Capacitor_Calibration_Fun</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, pf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = pF_Capacitor_Calibration_Fun &rArr; pF_Capacitor_Calibration &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>Mark_Short_Pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_study.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
</UL>

<P><STRONG><a name="[297]"></a>Find_Mark_Short_Pin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_study.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
</UL>

<P><STRONG><a name="[296]"></a>View_Short_Group</STRONG> (Thumb, 292 bytes, Stack size 160 bytes, os_study.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = View_Short_Group &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
</UL>

<P><STRONG><a name="[2f]"></a>Read_OS_Group</STRONG> (Thumb, 414 bytes, Stack size 1576 bytes, os_study.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2572 + Unknown Stack Size
<LI>Call Chain = Read_OS_Group &rArr; Short_RES_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RES_Test_Analog_Switch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RES_Test_Analog_Switch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Mark_Short_Pin
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark_Short_Pin
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.data)
</UL>
<P><STRONG><a name="[299]"></a>Hall_TEST_Relay_SET</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = Hall_TEST_Relay_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
</UL>

<P><STRONG><a name="[29a]"></a>Hall_TEST_Relay_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = Hall_TEST_Relay_RESET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
</UL>

<P><STRONG><a name="[29c]"></a>Hall_Test</STRONG> (Thumb, 1024 bytes, Stack size 208 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220 + Unknown Stack Size
<LI>Call Chain = Hall_Test &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hall_Ouput_Vlots
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ElectroMagnet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
</UL>

<P><STRONG><a name="[3e]"></a>Type_Hall_Test_Fun</STRONG> (Thumb, 538 bytes, Stack size 80 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = Type_Hall_Test_Fun &rArr; Hall_Test &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_RESET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ElectroMagnet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[29e]"></a>Volts_TEST_Relay_SET</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Volts_TEST_Relay_SET &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
</UL>

<P><STRONG><a name="[29f]"></a>DVolts_TEST_Relay_RESET</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = DVolts_TEST_Relay_RESET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
</UL>

<P><STRONG><a name="[3a]"></a>Type_Volts_Test_Fun</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = Type_Volts_Test_Fun &rArr; LDO_Volts_Test &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVolts_TEST_Relay_RESET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[2a3]"></a>Cur_TEST_Relay_SET</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, leakage_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cur_TEST_Relay_SET &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
</UL>

<P><STRONG><a name="[2a4]"></a>Cur_TEST_Relay_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, leakage_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = Cur_TEST_Relay_RESET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
</UL>

<P><STRONG><a name="[39]"></a>Type_Current_Test_Fun</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, leakage_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452 + Unknown Stack Size
<LI>Call Chain = Type_Current_Test_Fun &rArr; Leakage_Current_Test &rArr; Read_Current &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_RESET
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_SET
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[2a7]"></a>LED_Forward_Test</STRONG> (Thumb, 662 bytes, Stack size 128 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + Unknown Stack Size
<LI>Call Chain = LED_Forward_Test &rArr; Read_LED_Vlots &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LED_Vlots
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Vol_Color_Test
</UL>

<P><STRONG><a name="[2a8]"></a>Read_Clolor_Percentage</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Read_Clolor_Percentage &rArr; Get_Color_Fre &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
</UL>

<P><STRONG><a name="[2a9]"></a>LED_light_Test</STRONG> (Thumb, 760 bytes, Stack size 216 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = LED_light_Test &rArr; Read_Clolor_Percentage &rArr; Get_Color_Fre &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Vol_Color_Test
</UL>

<P><STRONG><a name="[2aa]"></a>LED_Forward_Vol_Color_Test</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = LED_Forward_Vol_Color_Test &rArr; LED_Forward_Test &rArr; Read_LED_Vlots &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
</UL>

<P><STRONG><a name="[2ab]"></a>LED_Vsrc_TEST_SET</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = LED_Vsrc_TEST_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
</UL>

<P><STRONG><a name="[2ac]"></a>LED_Vsrc_TEST_RESET</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Vsrc_TEST_RESET &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_LED_Test_Fun
</UL>

<P><STRONG><a name="[3d]"></a>Type_LED_Test_Fun</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = Type_LED_Test_Fun &rArr; LED_Forward_Vol_Color_Test &rArr; LED_Forward_Test &rArr; Read_LED_Vlots &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_RESET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Vol_Color_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[2ad]"></a>SW_Res_4wire_Test</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = SW_Res_4wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
</UL>

<P><STRONG><a name="[2ae]"></a>Switch_ON_Test</STRONG> (Thumb, 1082 bytes, Stack size 216 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = Switch_ON_Test &rArr; SW_Res_4wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
</UL>

<P><STRONG><a name="[2af]"></a>Switch_OFF_Test</STRONG> (Thumb, 848 bytes, Stack size 208 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212 + Unknown Stack Size
<LI>Call Chain = Switch_OFF_Test &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
</UL>

<P><STRONG><a name="[2b0]"></a>SW_Vsrc_RES_TEST_SET</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = SW_Vsrc_RES_TEST_SET &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sample_Rate_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
</UL>

<P><STRONG><a name="[2b1]"></a>SW_Vsrc_RES_TEST_RESET</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SW_Vsrc_RES_TEST_RESET &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
</UL>

<P><STRONG><a name="[2b2]"></a>SW_Enable_RES_Test</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SW_Enable_RES_Test &rArr; Relay_Drive &rArr; Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
</UL>

<P><STRONG><a name="[3c]"></a>Type_Switch_Test_Fun</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = Type_Switch_Test_Fun &rArr; Switch_ON_Test &rArr; SW_Res_4wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Enable_RES_Test
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_RESET
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Type_IC_ID_Test_Fun</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = Type_IC_ID_Test_Fun &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>Read_IC_ID_Debug</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = Read_IC_ID_Debug &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_IIC_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Four_Point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_start_key_val
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_config.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>suBUS_reset_CPLD</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = suBUS_reset_CPLD
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Reg_Val
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Reg_Val
</UL>

<P><STRONG><a name="[2b8]"></a>SuBus8_proce</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SuBus8_proce
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Data_Generate
</UL>

<P><STRONG><a name="[2b6]"></a>SuBus12_proce</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SuBus12_proce
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Data_Generate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Data_Generate
</UL>

<P><STRONG><a name="[2b5]"></a>suBus_Read_Data_Generate</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = suBus_Read_Data_Generate &rArr; SuBus12_proce
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuBus12_proce
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>

<P><STRONG><a name="[2b7]"></a>suBus_Write_Data_Generate</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = suBus_Write_Data_Generate &rArr; SuBus12_proce
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuBus12_proce
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuBus8_proce
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegValue
</UL>

<P><STRONG><a name="[2b9]"></a>suBus_Read_Reg_Val</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = suBus_Read_Reg_Val &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_UART
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBUS_reset_CPLD
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>

<P><STRONG><a name="[2ba]"></a>suBus_Write_Reg_Val</STRONG> (Thumb, 50 bytes, Stack size 136 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = suBus_Write_Reg_Val &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_UART
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Get_USART_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Uart_printf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBUS_reset_CPLD
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegValue
</UL>

<P><STRONG><a name="[2bb]"></a>ReadRegValue</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadRegValue &rArr; suBus_Read_Reg_Val &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Reg_Val
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Read_Data_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFSwitchStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFSwitch
</UL>

<P><STRONG><a name="[2bc]"></a>WriteRegValue</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WriteRegValue &rArr; suBus_Write_Reg_Val &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Reg_Val
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suBus_Write_Data_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFSwitchStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFSwitch
</UL>

<P><STRONG><a name="[2bd]"></a>SbudCondition</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, subus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[2be]"></a>ChangeRFSwitch</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, subus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegValue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>

<P><STRONG><a name="[2bf]"></a>SetRFSwitchStatus</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, subus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetRFSwitchStatus &rArr; WriteRegValue &rArr; suBus_Write_Reg_Val &rArr; _Get_USART_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegValue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
</UL>

<P><STRONG><a name="[2c0]"></a>SbudsCondition</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SbudsCondition &rArr; uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_RF_IC
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
</UL>

<P><STRONG><a name="[2c1]"></a>ChangeRFICStatus</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ChangeRFICStatus &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
</UL>

<P><STRONG><a name="[2c3]"></a>Get_RF_Total_Result</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Get_RF_Total_Result &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
</UL>

<P><STRONG><a name="[2c4]"></a>RF_Step_debug</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RF_Step_debug &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFSwitchStatus
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
</UL>

<P><STRONG><a name="[2c5]"></a>RF_Auto_Test</STRONG> (Thumb, 426 bytes, Stack size 80 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = RF_Auto_Test &rArr; ChangeRFICStatus &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_UART
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USART_buffer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RF_Total_Result
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_Test_Fun
</UL>

<P><STRONG><a name="[223]"></a>Type_RF_Test_Fun</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = Type_RF_Test_Fun &rArr; RF_Auto_Test &rArr; ChangeRFICStatus &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_All_Point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Step_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>

<P><STRONG><a name="[2c6]"></a>Debug_RF_IC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
</UL>

<P><STRONG><a name="[2c7]"></a>ID_Test</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, rf_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ID_Test &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbudsCondition
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_RF_ID_Test_Fun
</UL>

<P><STRONG><a name="[40]"></a>Type_RF_ID_Test_Fun</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, rf_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Type_RF_ID_Test_Fun &rArr; ID_Test &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_buffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_test_mode_get_key
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> list_test.o(.data)
</UL>
<P><STRONG><a name="[23e]"></a>Set_Test_Satation</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, wtb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
</UL>

<P><STRONG><a name="[202]"></a>Get_Soft_Start_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wtb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstarttime
</UL>

<P><STRONG><a name="[68]"></a>GetStationNum_Handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GetStationNum_Handler &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>Connect_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Connect_Handler &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>Get_TestItem_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Get_TestItem_Handler &rArr; WTB_Software_Upload_Test_Item &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>Get_TestDetailItem_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Get_TestDetailItem_Handler &rArr; WTB_Software_Upload_Test_Item &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>SoftwareClearHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SoftwareClearHandler &rArr; clear_counter &rArr; RevertStartupScreen &rArr; Display_Total_Rate &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_counter
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>SoftwareStartTestHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SoftwareStartTestHandler &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>SoftwareMCUISPHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SoftwareMCUISPHandler &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUISP_Hander
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>SoftwareReadHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = SoftwareReadHandler &rArr; Read_All_Reg_Value &rArr; Read_pF_Capacitor_offset &rArr; AD5933_Initalize &rArr; AD5933_Calibration &rArr; Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>SoftwareResetHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = SoftwareResetHandler &rArr; Reset_All_Reg_Value &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Reg_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[2ca]"></a>WTB_Software_Cmd_Check</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WTB_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Cmd_Hander
</UL>

<P><STRONG><a name="[1e4]"></a>WTB_Software_Get_Scan_Result</STRONG> (Thumb, 832 bytes, Stack size 136 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = WTB_Software_Get_Scan_Result &rArr; Software_Trigger_Scan &rArr; BarcodeReaderTrigger &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
</UL>

<P><STRONG><a name="[2cb]"></a>WTB_Software_Get_Save_Result</STRONG> (Thumb, 108 bytes, Stack size 112 bytes, wtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = WTB_Software_Get_Save_Result &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
</UL>

<P><STRONG><a name="[1e5]"></a>ZDT_Software_Sotp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Sotp &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Up_Down_Move
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
</UL>

<P><STRONG><a name="[2cc]"></a>ZDT_Software_Cmd_Check</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, zdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUISP_Hander
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Cmd_Hander
</UL>

<P><STRONG><a name="[1e3]"></a>ZDT_Software_Get_Scan_Result</STRONG> (Thumb, 332 bytes, Stack size 136 bytes, zdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Get_Scan_Result &rArr; Software_Trigger_Scan &rArr; BarcodeReaderTrigger &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Sotp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Result
</UL>

<P><STRONG><a name="[2cd]"></a>ZDT_Software_Get_Save_Result</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, zdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Get_Save_Result &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
</UL>

<P><STRONG><a name="[2ce]"></a>Get_Short_Num</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Short_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
</UL>

<P><STRONG><a name="[2cf]"></a>Get_Open_Num</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Open_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
</UL>

<P><STRONG><a name="[2d0]"></a>Get_Component_Num</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Test_Item
</UL>

<P><STRONG><a name="[1ee]"></a>Init_Test_data</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Test_data &rArr; Get_Open_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Component_Num
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Open_Num
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Short_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
</UL>

<P><STRONG><a name="[2d1]"></a>Find_Insulation_Reuslt</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Find_Insulation_Reuslt &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
</UL>

<P><STRONG><a name="[2c9]"></a>WTB_Software_Upload_Test_Item</STRONG> (Thumb, 750 bytes, Stack size 64 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = WTB_Software_Upload_Test_Item &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TestDetailItem_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TestItem_Handler
</UL>

<P><STRONG><a name="[222]"></a>WTB_Software_Upload_Data</STRONG> (Thumb, 574 bytes, Stack size 112 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = WTB_Software_Upload_Data &rArr; WTB_Software_Get_Save_Result &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Currennt_Type_CNT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Insulation_Reuslt
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Open_Num
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Short_Num
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>

<P><STRONG><a name="[220]"></a>ZDT_Software_Upload_Test_Item</STRONG> (Thumb, 896 bytes, Stack size 48 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Upload_Test_Item &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Component_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>

<P><STRONG><a name="[224]"></a>ZDT_Software_Upload_Data</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ZDT_Software_Upload_Data &rArr; ZDT_Software_Get_Save_Result &rArr; Get_USART_buffer &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Scan_Mode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Open_Num
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Short_Num
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Step_Test_Fun
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Auto_Test_Fun
</UL>

<P><STRONG><a name="[69]"></a>UploadShortGroup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = UploadShortGroup &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wtb.o(.data)
</UL>
<P><STRONG><a name="[2d3]"></a>Upload_Test_Data</STRONG> (Thumb, 2348 bytes, Stack size 128 bytes, data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[1f]"></a>Test_Previous_Wait_Time_Set</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Test_Previous_Wait_Time_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Cmd_Dealy_Set</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Cmd_Dealy_Set &rArr; Choice_Menu_Num &rArr; step_test_mode_get_key &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice_Menu_Num
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1d8]"></a>Software_Cmd_Hander</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Software_Cmd_Hander &rArr; WTB_Software_Cmd_Check &rArr; Uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3fb]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_printf
</UL>

<P><STRONG><a name="[18f]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
</UL>

<P><STRONG><a name="[22e]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Compile_Time
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Insulation_Reuslt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
</UL>

<P><STRONG><a name="[2d7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d1]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[2dd]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[23d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Compile_Time
</UL>

<P><STRONG><a name="[215]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
</UL>

<P><STRONG><a name="[20f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_PORT_Number
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect_Test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_Mode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_GATEWAY
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_netmask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NET_ip_Address
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Upper_Cmd_Check
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Cmd_Check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Auto_Test
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RF_Total_Result
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LDO_Volts
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hall_Ouput_Vlots
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TVS_Diode_Volts
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Diode_Volts
</UL>

<P><STRONG><a name="[23c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Compile_Time
</UL>

<P><STRONG><a name="[213]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
</UL>

<P><STRONG><a name="[1ca]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip_Set_fun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewShortGroup
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barcode_Format_Check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
</UL>

<P><STRONG><a name="[2d4]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Enable_Set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Enable_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Compile_Time
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Vsrc_Test_Fun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_TVS_Test_Fun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Diode_Test_Fun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeCheckEnable_Set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Push_Privious_Or_Next
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
</UL>

<P><STRONG><a name="[3fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scan_Result
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test_data
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_UART
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Gooup_Edit_Check
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[2e3]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2e2]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Scan_Result
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Scan_Result
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteHoldingReg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadHoldingReg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadInputStatusReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWriteSingleCoil
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FReadCoils
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Parameter_To_ETHModulea
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderTriggerTest
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Get_Save_Result
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Get_Save_Result
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Cmd_Check
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Short_Group
</UL>

<P><STRONG><a name="[3ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1cb]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_USART_buffer
</UL>

<P><STRONG><a name="[209]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Input
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[401]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[406]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[2e6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2d8]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2d9]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2da]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2db]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[2dc]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[408]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2d5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[bd]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[2f0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2d6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2f2]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d9]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2f4]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d5]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[dd]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2f5]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d7]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[df]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[cb]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2f8]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[2e1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[409]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2ec]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2ef]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2fb]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e5]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[e7]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[c0]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2fa]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2e8]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f1]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2f3]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[ee]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2fc]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[302]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[f3]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[307]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[33d]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[40b]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30b]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[30a]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[30e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[30c]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[30d]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[2ea]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[301]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2eb]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[300]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[30f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2ee]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[310]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[311]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[312]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[313]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[314]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[316]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[305]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[317]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[309]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2de]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2c2]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
</UL>

<P><STRONG><a name="[318]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[319]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[1a2]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
</UL>

<P><STRONG><a name="[1a9]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
</UL>

<P><STRONG><a name="[ec]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[c3]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[31b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[31e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[321]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[325]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_settling_time
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_RES_Check
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LED_Vlots
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LDO_Volts
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hall_Ouput_Vlots
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TVS_Diode_Volts
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Diode_Volts
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[323]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Fixture
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Enable_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadFixtureConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Up_Down_EACT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Take_OFF_EACT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_TEST_Relay_SET
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volts_TEST_Relay_SET
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_TEST_Relay_SET
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_TEST_Relay_SET
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[324]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
</UL>

<P><STRONG><a name="[326]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAKE_OFF_EACT_MOVE
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Fixture
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_settling_time
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TEST_Station
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevertStartupScreen
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Relay_SET
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_TEST_SET
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vsrc_RES_TEST_SET
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Speed_Set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_NG_Postion_Set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_OK_Postion_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_Enable_Set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Enable_Set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Time_Set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Enable_Set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Cycle_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_EACT_set
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETH_Parameter_From_EEPROM
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Hold_Reg_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PASS_Row_Num
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Take_OFF_Enable_bit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeLength_Set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeCheckEnable_Set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReader_Set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeMode_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Time_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Push_Privious_Or_Next
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Reader_Configuration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format_Configuration
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Previous_Wait_Time_Set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Dealy_Set
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Scan_Configration
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareStartTestHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareClearHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStationNum_Handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFICStatus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Vsrc_RES_TEST_SET
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Vsrc_TEST_SET
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_TEST_Relay_SET
</UL>

<P><STRONG><a name="[327]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LEC_Current_Postion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[40c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Color_Fre
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Test_Result
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Speed_Set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Enable_Set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Num_Set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Enable_Set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Speed_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_CNT_Enable_Set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Time_Set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Enable_Set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Cycle_Set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Enable_Set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Switch_Test_Fun
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeLength_Set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeCheckEnable_Set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReaderBauds_Set
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeReader_Set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeMode_Set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Time_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Push_Privious_Or_Next
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Previous_Wait_Time_Set
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Dealy_Set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
</UL>

<P><STRONG><a name="[40d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Product_Mark_Dot
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Self_Check
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Point_Function
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Ananlog_Switch
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pf_Cap_Value
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
</UL>

<P><STRONG><a name="[328]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[32b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Axis_Running_Position
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_Protect_Fun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Fun
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Move
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TVS_Diode_Volts
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[329]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[31d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[320]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Hold_Reg_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_All_Reg_Value
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_Recognition
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Test_DAC_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_debug_Open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_RES_Value_Fun
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Res_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kohm_Test
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mohm_4wire_Test_Res
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_4wire_Test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Push_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_Standy_Set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Product_Position_Set
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Coordinate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Direction
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Block_RES_Check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Signal_Reg_Value
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Check_Fun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Single_Reg_Value
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dot_Pen_Replace_Check
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Res_4wire_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_RES_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Self_Check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Test_RES
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Res_Test
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[32a]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[32c]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[31a]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Down_EACT_MOVE
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pulse_Fre
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Position
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Message
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Station_Set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Notice_Check
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pf_Cap_Value
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Calibration
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
</UL>

<P><STRONG><a name="[32e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Total_Rate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Pulse_Count
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_pF_Capacitor_offset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pF_Capacitor_offset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Test_Item
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDT_Software_Upload_Data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Test_Data
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Insulation_Reuslt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTB_Software_Upload_Test_Item
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Clolor_Percentage
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_pf_Cap_Value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CAP_Value
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
</UL>

<P><STRONG><a name="[32f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[40e]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[331]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[336]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Motor_Enable_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Display
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MOVE
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pos_Set
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Dot_Enable_Set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Move_Set
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_Motor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USB_Move_Motor
</UL>

<P><STRONG><a name="[333]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
</UL>

<P><STRONG><a name="[334]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
</UL>

<P><STRONG><a name="[40f]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol_Ref
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
</UL>

<P><STRONG><a name="[410]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[248]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
</UL>

<P><STRONG><a name="[335]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[339]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
</UL>

<P><STRONG><a name="[337]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[330]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[31c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[277]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Open_Test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KOhm_RES_Test
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Register_Test
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_Test
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_ON_Test
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_light_Test
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max_CAP_Tests
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Short_Test
</UL>

<P><STRONG><a name="[338]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Sample_Time
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_Capacitor_Calibration
</UL>

<P><STRONG><a name="[33a]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[cd]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[322]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[315]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[2f7]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[304]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[303]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[33c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[107]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[105]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[103]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[101]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16b]"></a>Drive_Valve</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sup_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drive_Valve
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Drive
</UL>

<P><STRONG><a name="[175]"></a>AD7176_Write_Data</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AD7176_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUISP_Hander
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Configure
</UL>

<P><STRONG><a name="[177]"></a>AD7176_Read_Data</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AD7176_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_AD7176
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
</UL>

<P><STRONG><a name="[174]"></a>AD7176_Configure</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ad7176.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7176_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage_mV_Auto
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Voltage
</UL>

<P><STRONG><a name="[195]"></a>Init_Mini_CAP_Test_GPIO</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Mini_CAP_Test_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
</UL>

<P><STRONG><a name="[19e]"></a>AD5933_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Stop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Real_imag_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_settling_time
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment_Number
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
</UL>

<P><STRONG><a name="[19f]"></a>AD5933_Create_Block_Command</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Stop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
</UL>

<P><STRONG><a name="[1a0]"></a>AD5933_read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Read_Byte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Wait_Ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Start
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Create_Block_Command
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Hardware_Check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Real_imag_data
</UL>

<P><STRONG><a name="[1a1]"></a>AD5933_Set_Start_Fre</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AD5933_Set_Start_Fre &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
</UL>

<P><STRONG><a name="[1a3]"></a>AD5933_Set_frequency_increment</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
</UL>

<P><STRONG><a name="[1a4]"></a>AD5933_Set_frequency_increment_Number</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AD5933_Set_frequency_increment_Number &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
</UL>

<P><STRONG><a name="[1a5]"></a>AD5933_Set_settling_time</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = AD5933_Set_settling_time &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Parameter
</UL>

<P><STRONG><a name="[1a6]"></a>Get_Real_imag_data</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Calibration
</UL>

<P><STRONG><a name="[1a7]"></a>AD5933_Set_Parameter</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AD5933_Set_Parameter &rArr; AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_settling_time
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment_Number
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_frequency_increment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Set_Start_Fre
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
</UL>

<P><STRONG><a name="[1a8]"></a>AD5933_Calibration</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AD5933_Calibration &rArr; Get_Real_imag_data &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Real_imag_data
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
</UL>

<P><STRONG><a name="[1ab]"></a>AD5933_Hardware_Check</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, ad5933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = AD5933_Hardware_Check &rArr; AD5933_read &rArr; AD5933_Create_Block_Command &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdreset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5933_Initalize
</UL>

<P><STRONG><a name="[1f8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1f7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[210]"></a>Read_Barcode_Format</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Read_Barcode_Format &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarcodeFormat_Set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Barcode_Format_Configuration
</UL>

<P><STRONG><a name="[214]"></a>Barcode_Format_Check</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, barcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Barcode_Format_Check &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Trigger_Scan
</UL>

<P><STRONG><a name="[24f]"></a>Calculate_Pulse_Count</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Calculate_Pulse_Count &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
</UL>

<P><STRONG><a name="[250]"></a>Judge_Direction</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Judge_Direction &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move
</UL>

<P><STRONG><a name="[275]"></a>mohm_4wire_Test_Res</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, mr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = mohm_4wire_Test_Res &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Isrc_Test_Fun
</UL>

<P><STRONG><a name="[27e]"></a>Open_Res_Test</STRONG> (Thumb, 126 bytes, Stack size 232 bytes, open.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = Open_Res_Test &rArr; Res_2wire_Test_Mohm &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test_Mohm
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test_Function_V2
</UL>

<P><STRONG><a name="[283]"></a>Short_Res_Test</STRONG> (Thumb, 196 bytes, Stack size 136 bytes, short.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = Short_Res_Test &rArr; Res_2wire_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_2wire_Test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Test_Function
</UL>

<P><STRONG><a name="[286]"></a>Read_Diode_Volts</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Read_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diode_Test
</UL>

<P><STRONG><a name="[28b]"></a>Read_TVS_Diode_Volts</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, diode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Read_TVS_Diode_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVS_Diode_Test
</UL>

<P><STRONG><a name="[292]"></a>Read_pf_Cap_Value</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, pf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Read_pf_Cap_Value &rArr; LCR_Test &rArr; AD5933_Set_Parameter &rArr; AD5933_Set_frequency_increment &rArr; AD5933_write &rArr; I2C0_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCR_Test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pF_CAP_Tests
</UL>

<P><STRONG><a name="[295]"></a>Short_RES_Test</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, os_study.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = Short_RES_Test &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OS_Group
</UL>

<P><STRONG><a name="[29d]"></a>Set_ElectroMagnet</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_ElectroMagnet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Hall_Test_Fun
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
</UL>

<P><STRONG><a name="[29b]"></a>Read_Hall_Ouput_Vlots</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Read_Hall_Ouput_Vlots &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hall_Test
</UL>

<P><STRONG><a name="[2a0]"></a>Read_LDO_Volts</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = Read_LDO_Volts &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDO_Volts_Test
</UL>

<P><STRONG><a name="[2a1]"></a>LDO_Volts_Test</STRONG> (Thumb, 942 bytes, Stack size 208 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220 + Unknown Stack Size
<LI>Call Chain = LDO_Volts_Test &rArr; DAC_Set_Vol &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_Drive
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_LDO_Volts
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Volts_Test_Fun
</UL>

<P><STRONG><a name="[2a2]"></a>Read_Current</STRONG> (Thumb, 128 bytes, Stack size 200 bytes, leakage_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = Read_Current &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leakage_Current_Test
</UL>

<P><STRONG><a name="[2a5]"></a>Leakage_Current_Test</STRONG> (Thumb, 788 bytes, Stack size 216 bytes, leakage_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = Leakage_Current_Test &rArr; Read_Current &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Two_Point
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Vol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_Current_Test_Fun
</UL>

<P><STRONG><a name="[2a6]"></a>Read_LED_Vlots</STRONG> (Thumb, 66 bytes, Stack size 184 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = Read_LED_Vlots &rArr; Read_AD7176_Average_Voltage_mV &rArr; Read_AD7176_Voltage &rArr; AD7176_Configure &rArr; AD7176_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AD7176_Average_Voltage_mV
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Average_Fun
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Forward_Test
</UL>

<P><STRONG><a name="[2b3]"></a>Read_Register_Test</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Read_Register_Test &rArr; startkeywait &rArr; Dot_Pen_Replace_Check &rArr; Save_Single_Reg_Value &rArr; read_double_data &rArr; Write_double_data &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; lcd_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_OneByteFromDevice
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeywait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyc4or3run
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdpos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Type_IC_ID_Test_Fun
</UL>

<P><STRONG><a name="[32d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[31f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[33b]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[332]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2e7]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[be]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2f6]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[2ff]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
